[{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthijs S. Berends. Author, maintainer. Gerolf C. de Boer. Author. University Medical Center Groningen. Copyright holder, funder.","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Berends MS, de Boer GC (2025). mmbi.epi: Helper Functions Unit Epidemiology & Data Science UMCG MMBI Department. R package version 0.0.1, https://umcg-mmbi-epidemiology.github.io/mmbi.epi/.","code":"@Manual{,   title = {mmbi.epi: Helper Functions for Unit Epidemiology & Data Science of UMCG MMBI Department},   author = {Matthijs S. Berends and Gerolf C. {de Boer}},   year = {2025},   note = {R package version 0.0.1},   url = {https://umcg-mmbi-epidemiology.github.io/mmbi.epi/}, }"},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/index.html","id":"mmbiepi","dir":"","previous_headings":"","what":"Helper Functions for Unit Epidemiology & Data Science of UMCG MMBI Department","title":"Helper Functions for Unit Epidemiology & Data Science of UMCG MMBI Department","text":"UMCG R package containing helper functions functionalities used department Medical Microbiology, unit Epidemiology & Data Science. Upon loading, official UMCG colours available :","code":"library(mmbi.epi)  get_colour(\"umcgdonkerblauw\") #> [1] \"#003183\"  get_colour(\"umcgoranje\") #> [1] \"#FF7D00\"  get_colour(\"umcg\", 2) #> [1] \"#003183\"  \"#FF7D00\""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/gis-datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"GIS Data Sets — gis-datasets","title":"GIS Data Sets — gis-datasets","text":"data sets inherited certegis package.","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/gis-datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GIS Data Sets — gis-datasets","text":"","code":"geo_gemeenten  geo_ggdregios  geo_nuts3  geo_postcodes2  geo_postcodes3  geo_postcodes4  geo_postcodes6  geo_provincies  postcodes  postcodes4_afstanden"},{"path":[]},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/gis-datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GIS Data Sets — gis-datasets","text":"","code":"geo_provincies #> Simple feature collection with 12 features and 3 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 13565.4 ymin: 306846.2 xmax: 278026.1 ymax: 619352.4 #> Projected CRS: Amersfoort / RD New #> First 10 features: #>        provincie inwoners oppervlakte_km2                       geometry #> 1        Drenthe   494705        2680.368 MULTIPOLYGON (((228930.1 57... #> 2      Flevoland   428210        1466.570 MULTIPOLYGON (((164912.9 51... #> 3      Friesland   651430        3531.269 MULTIPOLYGON (((154047.9 56... #> 4     Gelderland  2096460        5118.931 MULTIPOLYGON (((169898.4 48... #> 5      Groningen   586920        2392.983 MULTIPOLYGON (((276560.6 58... #> 6        Limburg  1115835        2210.001 MULTIPOLYGON (((192680.3 41... #> 7  Noord-Brabant  2573810        5054.037 MULTIPOLYGON (((100303.1 41... #> 8  Noord-Holland  2887460        2864.383 MULTIPOLYGON (((150846.9 47... #> 9     Overijssel  1166335        3408.845 MULTIPOLYGON (((182721.3 51... #> 10       Utrecht  1360955        1553.980 MULTIPOLYGON (((130059 4794...  geo_provincies |>   plot2(title = \"Inwoners in Nederlandse provincies\") #> ℹ Assuming datalabels.centroid = TRUE. Set to FALSE for a point-on-surface #> placing of datalabels. #> ℹ Using category = inwoners #> ℹ Using datalabels = provincie #> Ignoring unknown labels: #> • colour : \"inwoners\"   geo_provincies |>   plot2(colour_fill = \"umcgoranje\") #> ℹ Adding white to the category scale - set two colours to colour_fill to #> prevent this. #> ℹ Assuming datalabels.centroid = TRUE. Set to FALSE for a point-on-surface #> placing of datalabels. #> ℹ Using category = inwoners #> ℹ Using datalabels = provincie #> Ignoring unknown labels: #> • colour : \"inwoners\"   geo_gemeenten |>   filter_geolocation(provincie == \"Groningen\") |>   plot2(category = inwoners / oppervlakte_km2,         category.title = \"Inwoners per km^2\",         title = \"Populatiedichtheid in Groningse gemeenten\") #> ℹ Assuming datalabels.centroid = TRUE. Set to FALSE for a point-on-surface #> placing of datalabels. #> ℹ Using datalabels = gemeente #> Ignoring unknown labels: #> • colour : \"inwoners/oppervlakte_km2\"   geo_gemeenten |>   filter_geolocation(provincie == \"Groningen\") |>   plot2(category = inwoners / oppervlakte_km2,         category.title = \"Inwoners per km^2\",         title = \"Populatiedichtheid in Groningse gemeenten\",         subtitle = \"Met postcode-4 als overlay\",         datalabels = FALSE,         colour = \"umcgblauw\",         linewidth = 1) |>   add_sf(geo_postcodes4 |> filter_geolocation(provincie == \"Groningen\"),          colour = \"umcgoranje\",          colour_fill = NA,          linewidth = 0.25) #> ℹ In 'sf' plots, colour will set the borders, not the areas - did you mean #> colour_fill = \"umcgblauw\"? #> Ignoring unknown labels: #> • colour : \"inwoners/oppervlakte_km2\""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/mmbi.epi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mmbi.epi: Helper Functions for Unit Epidemiology & Data Science of UMCG MMBI Department — mmbi.epi-package","title":"mmbi.epi: Helper Functions for Unit Epidemiology & Data Science of UMCG MMBI Department — mmbi.epi-package","text":"UMCG R package containing helper functions functionalities used department Medical Microbiology, unit Epidemiology & Data Science.","code":""},{"path":[]},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/mmbi.epi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mmbi.epi: Helper Functions for Unit Epidemiology & Data Science of UMCG MMBI Department — mmbi.epi-package","text":"Maintainer: Matthijs S. Berends m.s.berends@umcg.nl Authors: Gerolf C. de Boer contributors: University Medical Center Groningen [copyright holder, funder]","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/plot_style_umcg.html","id":null,"dir":"Reference","previous_headings":"","what":"UMCG Plot Style — scale_colour_umcg","title":"UMCG Plot Style — scale_colour_umcg","text":"ggplot2 helpers add organisational colours ggplot objects.","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/plot_style_umcg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UMCG Plot Style — scale_colour_umcg","text":"","code":"scale_colour_umcg(..., n)  scale_fill_umcg(..., n)  register_umcg_plot_style()  unregister_umcg_plot_style()"},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/plot_style_umcg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UMCG Plot Style — scale_colour_umcg","text":"... arguments passed ggplot2::scale_colour_manual() ggplot2::scale_fill_manual() n Number colours required.","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/plot_style_umcg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UMCG Plot Style — scale_colour_umcg","text":"","code":"library(ggplot2)  p <- mtcars |>   ggplot(aes(x = hp,              y = mpg,              colour = as.factor(vs)),              fill = as.factor(vs)) +   geom_point(size = 3) +   geom_smooth() #> Warning: Arguments in `...` must be used. #> ✖ Problematic argument: #> • fill = as.factor(vs) #> ℹ Did you misspell an argument name? p #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   p +   scale_colour_umcg(n = 2) +   scale_fill_umcg(n = 2) +   labs(title = \"UMCG colours\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   # With plot2(), this all goes automatically with less code mtcars |>   plot2(x = hp,         y = mpg,         category = as.factor(vs),         smooth = TRUE,         title = \"Fully UMCG-styled plot\",         subtitle = \"(with the right font too; 'Outfit' from Google Fonts)\") #> ℹ Using type = \"point\" since both axes are numeric #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. certegis add_map, .sf, cases_within_radius, convert_to_metre_CRS28992, degrees_to_sf, filter_geolocation, filter_sf, geocode, .sf, latitude, longitude, reverse_geocode plot2 add_line, add_sf, add_smooth, add_type, get_colour, plot2","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/serialise-encrypt-post.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","title":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","text":"Securely serialise, compress, encrypt, transfer R object full attribute preservation cross-platform JSON compatibility.","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/serialise-encrypt-post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","text":"","code":"serialise(object, compress = TRUE, as_character = TRUE)  deserialise(object, decompress = TRUE)  encrypt(x, key = Sys.getenv(\"mmbi_epi_encryption_key\"), as_character = TRUE)  decrypt(x, key = Sys.getenv(\"mmbi_epi_encryption_key\"), as_character = TRUE)  post_data(   object,   url,   authorization_header = NULL,   compress = TRUE,   encrypt = TRUE,   key = Sys.getenv(\"mmbi_epi_encryption_key\") )  create_json_body(   object,   compress = TRUE,   encrypt = TRUE,   key = Sys.getenv(\"mmbi_epi_encryption_key\") )  read_json_body(   object,   decompress = TRUE,   decrypt = NULL,   key = Sys.getenv(\"mmbi_epi_encryption_key\") )"},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/serialise-encrypt-post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","text":"object object size, preferably data set compress, decompress serialised object compressed/decompressed? least allowed: \"gzip\" (TRUE), \"bzip2\", \"xz\", see base::memCompress(). Use FALSE compress/decompress. as_character logical indicate whether output converted character string. Note limit 2,147,483,647 characters (= \\(2^{31} - 1\\) bytes = ~2 GB object size), raw vector used large inputs (.e., as_character = FALSE). x raw character vector key character used encryption key. Internally, converted using openssl::sha256() ensure raw high-entropy key length 32, suitable AES-GCM encryption. default system environment variable: mmbi_epi_encryption_key. url character string specifying target URL HTTP POST request. Must include full scheme (e.g., \"https://\" \"http://\"), hostname, path. authorization_header character string specifying value Authorization header include POST request, e.g. \"Bearer <token>\". Use NULL omit header. encrypt, decrypt serialised object encrypted/decrypted? applies AES-GCM via openssl::aes_gcm_encrypt(), providing authenticated encryption. guarantees confidentiality integrity: file read without correct key, tampering detected automatically decryption. initialization vector (iv) length-12 random raw vector.","code":""},{"path":[]},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/serialise-encrypt-post.html","id":"serialisation","dir":"Reference","previous_headings":"","what":"Serialisation","title":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","text":"serialise() converts arbitrary R object transportable format wrapping metadata, including: Object-level attributes (via attributes()), data frames: per-column attributes, including class (e.g., factor, Date, POSIXct), levels, time zone information. wrapped structure converted JSON using jsonlite::toJSON(), consistent handling NULLs, NAs, timestamps. structure allows accurate reconstruction original object, including attributes, passed deserialise(). resulting JSON representation portable can decoded non-R environments Python. method avoids using base R serialize(), output R-specific unreadable elsewhere.","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/serialise-encrypt-post.html","id":"compression","dir":"Reference","previous_headings":"","what":"Compression","title":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","text":"compress = TRUE, serialise() uses gzip compression (memCompress(type = \"gzip\")) default. algorithms (\"bzip2\", \"xz\") supported. Compression reduces payload size requires algorithm used decompression. deserialise() read_json_body() corresponding memDecompress() step applied decompress = TRUE.","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/serialise-encrypt-post.html","id":"encryption-aes-gcm-","dir":"Reference","previous_headings":"","what":"Encryption (AES-GCM)","title":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","text":"encrypt() applies AES Galois/Counter Mode (GCM) via openssl::aes_gcm_encrypt(). AES-GCM provides authenticated encryption: guarantees confidentiality (content unreadable without key) integrity (bit-level modification detected decryption). fresh 12-byte initialisation vector (IV) generated encryption (rand_bytes(12)), required security. IV random/unique per call, ciphertext differs across runs even identical inputs; expected desirable. IV secret packaged alongside ciphertext decryption can succeed.","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/serialise-encrypt-post.html","id":"transport","dir":"Reference","previous_headings":"","what":"Transport","title":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","text":"post_data() sends JSON body httr::POST() using encode = \"json\" sets HTTP Authorization header pass one (example bearer token). receiving service can stack can: (1) parse JSON, (2) base64-decode fields, (3) perform AES-GCM decryption key IV, (4) gzip decompress, (5) deserialise JSON strings.","code":""},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/serialise-encrypt-post.html","id":"read-in-r","dir":"Reference","previous_headings":"","what":"Read in R","title":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","text":"decrypt, decompress, process R receiving side, :","code":"library(mmbi.epi)  # assuming `json_payload` is received read_json_body(decompress = TRUE, decrypt = TRUE, key = \"my-key\")"},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/serialise-encrypt-post.html","id":"read-in-python","dir":"Reference","previous_headings":"","what":"Read in Python","title":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","text":"decrypt, decompress, process Python receiving side, :","code":"import json, base64, gzip import pandas as pd from Crypto.Cipher import AES from Crypto.Hash import SHA256  # assuming `json_payload` is received payload = json.loads(json_payload) ct = base64.b64decode(payload[\"data\"]) iv = base64.b64decode(payload[\"iv\"])  # key derivation (same as openssl::sha256 in R) key = SHA256.new(b\"my-key\").digest()  # decrypt (AES-GCM) cipher = AES.new(key, AES.MODE_GCM, nonce=iv) decrypted = cipher.decrypt(ct)  # decompress and parse decompressed = gzip.decompress(decrypted) df = pd.read_json(decompressed.decode(\"utf-8\"))"},{"path":"https://umcg-mmbi-epidemiology.github.io/mmbi.epi/reference/serialise-encrypt-post.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serialise, Compress, Encrypt, and Transfer Data — serialise-encrypt-post","text":"","code":"# SERIALISATION AND ENCRYPTION -----------------------------------------  # in essence: iris2 <- iris |> serialise() |> deserialise() identical(iris, iris2) #> [1] TRUE # and: iris3 <- iris |> serialise() |> encrypt() |> decrypt() |> deserialise() identical(iris, iris3) #> [1] TRUE  # a serialised object is a representation for any type of data serialise(iris)[1:25] #>  [1] \"78\" \"9c\" \"b5\" \"5a\" \"4d\" \"8f\" \"5b\" \"37\" \"0c\" \"fc\" \"2f\" \"ef\" \"3c\" \"30\" \"1e\" #> [16] \"45\" \"52\" \"1f\" \"fe\" \"0d\" \"3d\" \"14\" \"c8\" \"a1\" \"87\"  # and can be converted back at any time iris |> serialise() |> deserialise() |> head() #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa   # POSTING DATA ---------------------------------------------------------  # post_data() sends data using POST, after serialising (and encrypting)  if (FALSE) { # \\dontrun{  post_data(iris,           url = \"https://some-server:8000/post\",           compress = TRUE,           encrypt = TRUE) } # }  # use create_json_body() to make an encrypted JSON of an object, and # read_json_body() to read it back iris_json <- iris |> create_json_body(compress = TRUE, encrypt = TRUE) # (can be sent securely to a server) # then: iris4 <- iris_json |> read_json_body(decompress = TRUE, decrypt = TRUE) identical(iris, iris4) #> [1] TRUE  # equivalent using curl: # curl -X POST https://some-server:8000/post #      -H \"Content-Type: application/json\" #      -d '...'  # replace the \"...\" with the outcome of create_json_body(): iris_json #> {\"data\":\"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\",\"iv\":\"t2r6yWpKuH0Oy1sL\"}"}]
