% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db.R
\name{connect_db}
\alias{connect_db}
\alias{glims_tbl}
\alias{glims_join_tbl}
\alias{disconnect_db}
\title{Database Access}
\usage{
connect_db()

glims_tbl(con, table_name, prefix = "ORAGLIMS")

glims_join_tbl(
  .data,
  table_name,
  by = NULL,
  ...,
  type = "left",
  prefix = "ORAGLIMS"
)

disconnect_db(con)
}
\arguments{
\item{con}{Connection object.}

\item{table_name}{Name of the table to query.}

\item{prefix}{Prefix string to prepend to \code{table_name} internally.}

\item{.data}{SQL data object.}

\item{by}{Column name(s) to join by. Can be a named vector to allow different names:\cr  \code{by = c("col_A" = "col_B")}.}

\item{...}{Arguments passed on the join functions.}

\item{type}{Direction of the join, defaults to \code{"left"}.
\itemize{
\item \code{\link[dplyr:mutate-joins]{"inner"}}: returns matched x rows.
\item \code{\link[dplyr:mutate-joins]{"left"}}: returns all x rows.
\item \code{\link[dplyr:mutate-joins]{"right"}}: returns matched of x rows, followed by unmatched y rows.
\item \code{\link[dplyr:mutate-joins]{"full"}}: returns all x rows, followed by unmatched y rows.
}}
}
\value{
Returns a live \code{DBIConnection} object that can be used with \code{DBI}, \code{dplyr}, or \code{dbplyr} for querying and manipulating data.
}
\description{
Establishes a connection to the GLIMS Oracle database using environment variables for all configuration parameters. This function is designed for use in secure environments such as Posit Workbench, where credentials and driver paths are stored outside the source code.
}
\section{Environment Variables}{


The following environment variables must be defined before using this function:
\itemize{
\item \strong{\code{MMBI_EPIDS_DRIVER}} - Full path to, or name of, the Oracle ODBC driver shared library
\item \strong{\code{MMBI_EPIDS_HOST}} - Hostname or IP address of the Oracle database server
\item \strong{\code{MMBI_EPIDS_PORT}} - Port number for the Oracle service (typically \code{1521})
\item \strong{\code{MMBI_EPIDS_SVC}} - Oracle Service Name (SVC) or SID identifying the database instance
\item \strong{\code{MMBI_EPIDS_USER}} - Oracle database username
\item \strong{\code{MMBI_EPIDS_PASS}} - Oracle database password
}

The environment variables are read at runtime using \code{Sys.getenv()} and passed to \code{\link[DBI:dbConnect]{DBI::dbConnect()}}. This approach ensures credentials are never exposed in the source code or logs.
}

\examples{
\dontrun{

# Opening Connection ---------------------------------------------------

# open connection and save as object
conn <- connect_db()

# connect to a table
conn |>
  glims_tbl("ANTIBIOTICRESULT")


# Running Queries ------------------------------------------------------

library(dplyr)

# download first 500 rows
first_500 <- conn |>
  glims_tbl("ANTIBIOTICRESULT") |>
  head(500) |>
  collect()

# dplyr functions are automatically translated into SQL
conn |>
  glims_tbl("ANTIBIOTICRESULT") |>
  filter(ABRS_RISRAWVALUE == 3) |>
  show_query() # use collect() instead to download

# more advanced queries can still run server-side
my_count <- conn |>
  glims_tbl("ANTIBIOTICRESULT") |>
  filter(ABRS_RISRAWVALUE == 3) |>
  count(ABRS_RISREPORTVALUECHANGED) |>
  show_query() |> # first show query
  collect()       # then immediately run and download data

# join to other columns server-side
joined_tbl <- conn |>
  glims_tbl("ANTIBIOTICRESULT") |>
  glims_join_tbl("ANOTHERTABLE", by = "some_column") |>
  show_query()


# Closing Connection ---------------------------------------------------

disconnect_db(conn)


}
}
\seealso{
\code{\link[DBI:dbConnect]{DBI::dbConnect()}}, \code{\link[odbc:dbConnect-OdbcDriver-method]{odbc::odbc()}}
}
